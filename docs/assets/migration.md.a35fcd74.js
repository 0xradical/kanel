import{_ as e,c as a,o as s,a as n}from"./app.c786b346.js";const g=JSON.parse('{"title":"Migrating from v2","description":"","frontmatter":{},"headers":[{"level":2,"title":"index.ts","slug":"index-ts","link":"#index-ts","children":[]},{"level":2,"title":"Nominators","slug":"nominators","link":"#nominators","children":[]},{"level":2,"title":"Ignoring entities","slug":"ignoring-entities","link":"#ignoring-entities","children":[]},{"level":2,"title":"customTypeMap","slug":"customtypemap","link":"#customtypemap","children":[]},{"level":2,"title":"External types","slug":"external-types","link":"#external-types","children":[]}],"relativePath":"migration.md"}'),t={name:"migration.md"},o=n(`<h1 id="migrating-from-v2" tabindex="-1">Migrating from v2 <a class="header-anchor" href="#migrating-from-v2" aria-hidden="true">#</a></h1><p>Version 3 introduces significant changes in how Kanel is configured and unless you ran it with an absolute minimum of customization, you will need to make some adjustments.</p><p>You can see the new type for the configuration object in <a href="../packages/kanel/src/Config.ts">Config.ts</a>.</p><h2 id="index-ts" tabindex="-1">index.ts <a class="header-anchor" href="#index-ts" aria-hidden="true">#</a></h2><p>Kanel no longer generates an <code>index.ts</code> file per default. There is a hook provided called <code>generateIndexFile</code> which you can use if you want it.</p><p><strong>Note:</strong> even with this, it no longer creates the composed id types etc., which I believe I was the only one using anyway.</p><p>In <code>.kanelrc.js</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> generateIndexFile </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kanel</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">connection</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// Generate an index file with exports of everything</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preRenderHooks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [generateIndexFile]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="nominators" tabindex="-1">Nominators <a class="header-anchor" href="#nominators" aria-hidden="true">#</a></h2><p>The nominators have been replaced by <code>getMetadata</code>, <code>getPropertyMetadata</code> and <code>generateIdentifierType</code>. These functions can be configured to return a custom name, comment and other things to customize your output.</p><p>The hooks are more or less intact as <a href="./postRenderHooks.html">postRenderHooks</a>. Those take a path and an array of strings, allowing you to do crude processing if necessary. However, you will probably prefer to create <a href="./preRenderHooks.html">preRenderHooks</a> that operate on more abstract data models and allow you more flexibility.</p><h2 id="ignoring-entities" tabindex="-1">Ignoring entities <a class="header-anchor" href="#ignoring-entities" aria-hidden="true">#</a></h2><p>The <code>schema.ignore</code> property has been replaced by one general <code>typeFilter</code> function which can filter out any table, view or other entity that you don&#39;t want to process.</p><p>If you used to have an ignore property like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">ignore: [/^celery/, /^djcelery/],</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>you could replace it with this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">typeFilter: d =&gt; ![/^celery/, /^djcelery/].some((v) =&gt; v.test(d.name)),</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="customtypemap" tabindex="-1">customTypeMap <a class="header-anchor" href="#customtypemap" aria-hidden="true">#</a></h2><p>The <code>customTypeMap</code> has changed slightly as well. It should now be indexed by <code>schemaName.typeName</code>. For builtin types, this means you specify them as <code>pg_catalog.float8</code> etc. Also, you no longer have to specify array types explicitly as these should be resolved using the same rules as non-array types.</p><h2 id="external-types" tabindex="-1">External types <a class="header-anchor" href="#external-types" aria-hidden="true">#</a></h2><p>The <code>externalTypesFolder</code> has been removed. Kanel will now assume that all types that are referenced as a simple string are built-in Typescript types (like <code>string</code>, <code>number</code>, <code>Record&lt;&gt;</code>, etc.). If you want to refer to a type that you created in a different file or that exists in an external package, you need to reference it as a <code>TypeImport</code>. You can do that in tagged comments like this: <code>@type(EmailString, &quot;./models/types/EmailString&quot;, false, true) Email address</code> -- this will import a type called <code>EmailString</code> from a file of the same name in the types folder. It will be imported as a named import.</p>`,21),l=[o];function r(i,p,c,d,y,h){return s(),a("div",null,l)}const m=e(t,[["render",r]]);export{g as __pageData,m as default};
