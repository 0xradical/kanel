import{_ as s,c as e,o as a,a as n}from"./app.c4171a9a.js";const C=JSON.parse('{"title":"Zod extension for Kanel","description":"","frontmatter":{},"headers":[{"level":2,"title":"generateZodSchemas","slug":"generatezodschemas","link":"#generatezodschemas","children":[]}],"relativePath":"kanel-zod.md"}'),o={name:"kanel-zod.md"},l=n(`<h1 id="zod-extension-for-kanel" tabindex="-1">Zod extension for Kanel <a class="header-anchor" href="#zod-extension-for-kanel" aria-hidden="true">#</a></h1><p>This packages extends <a href="https://github.com/kristiandupont/kanel" target="_blank" rel="noreferrer">Kanel</a> with some <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer">Zod</a> specific features.</p><p>Assuming you already have Kanel installed, add this with</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ npm i -D kanel-zod</span></span>
<span class="line"></span></code></pre></div><h2 id="generatezodschemas" tabindex="-1">generateZodSchemas <a class="header-anchor" href="#generatezodschemas" aria-hidden="true">#</a></h2><p>This pre-render hook will generate zod schemas for all your types. The default setup will convert the table name into <code>camelCase</code> which is a semi-standard Typescript convention for items that aren&#39;t types.</p><p>The</p><p>To use it, add it to your <code>.kanelrc.js</code> file:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> generateZodSchemas </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kanel-zod</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// ... your config here.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preRenderHooks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [generateZodSchemas]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div>`,9),t=[l];function p(r,c,i,d,h,y){return a(),e("div",null,t)}const A=s(o,[["render",p]]);export{C as __pageData,A as default};
